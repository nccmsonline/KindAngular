{"version":3,"sources":["ng://@candidosales/material-time-picker/lib/w-clock/w-clock.component.ts","ng://@candidosales/material-time-picker/lib/w-time-dialog/w-time-dialog.component.ts","ng://@candidosales/material-time-picker/lib/utils.ts","ng://@candidosales/material-time-picker/lib/material-timepicker/material-timepicker.component.ts","ng://@candidosales/material-time-picker/lib/w-time/w-time.component.ts","ng://@candidosales/material-time-picker/lib/material-time-picker.module.ts"],"names":["HOURS","MINUTES","WClockComponent","this","userTimeChange","EventEmitter","viewChange","steps","Array","prototype","ngOnChanges","setupUI","currentView","CLOCK_TYPE","i","userTime","format","push","selectedTimePart","hour","minute","getPointerStyle","divider","degrees","-webkit-transform","Math","round","-ms-transform","transform","getTimeValueClass","step","index","STEP_DEG","classes","changeTimeValue","emit","Component","args","selector","template","Input","Output","WTimeDialogComponent","dialogRef","data","VIEW_HOURS","VIEW_MINUTES","time","color","revert","close","submit","MatDialogRef","Inject","MAT_DIALOG_DATA","Utils","formatHour","String","formatMinute","MaterialTimePickerComponent","dialog","label","appearance","change","ngOnInit","meriden","showPicker","_this","open","revertLabel","submitLabel","afterClosed","subscribe","result","undefined","dataEvent","emitChange","MatDialog","WTimeComponent","onRevert","onSubmit","setCurrentView","type","setMeridien","m","emituserTimeChange","event","MaterialTimePickerModule","NgModule","declarations","imports","MatButtonModule","MatButtonToggleModule","MatDialogModule","MatFormFieldModule","MatIconModule","MatInputModule","MatSelectModule","MatToolbarModule","CommonModule","FormsModule","FlexLayoutModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges\n} from '@angular/core';\n\n// Current type to show\nexport enum CLOCK_TYPE {\n  HOURS = 1,\n  MINUTES = 2\n}\n\nexport type TimeFormat = 12 | 24;\n\nexport interface ITime {\n  hour: any;\n  minute: any;\n  meriden: 'PM' | 'AM';\n  format: TimeFormat;\n}\n\n@Component({\n  selector: 'w-clock',\n  styleUrls: ['./w-clock.component.scss'],\n  templateUrl: './w-clock.component.html'\n})\nexport class WClockComponent implements OnChanges {\n  @Input() public userTime: ITime;\n  @Output() public userTimeChange: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() public currentView: CLOCK_TYPE;\n  @Output() public viewChange = new EventEmitter<CLOCK_TYPE>();\n\n  @Input() public color: string;\n\n  public steps = new Array<number>();\n  selectedTimePart;\n  private STEP_DEG: number;\n\n  ngOnChanges() {\n    this.setupUI();\n  }\n\n  private setupUI() {\n    this.steps = new Array<number>();\n\n    switch (this.currentView) {\n      case CLOCK_TYPE.HOURS:\n        for (let i = 1; i <= this.userTime.format; i++) {\n          this.steps.push(i);\n          this.selectedTimePart = this.userTime.hour || 0;\n\n          if (this.selectedTimePart > this.userTime.format) {\n            this.selectedTimePart -= this.userTime.format;\n          }\n        }\n        break;\n\n      case CLOCK_TYPE.MINUTES:\n        for (let i = 5; i <= 55; i += 5) {\n          this.steps.push(i);\n        }\n        this.steps.push(0);\n        this.selectedTimePart = this.userTime.minute || 0;\n        break;\n    }\n  }\n\n  getPointerStyle() {\n    let divider = 1;\n    switch (this.currentView) {\n      case CLOCK_TYPE.HOURS:\n        divider = this.userTime.format;\n        break;\n\n      case CLOCK_TYPE.MINUTES:\n        divider = 60;\n        break;\n    }\n\n    let degrees = 0;\n    if (this.currentView === CLOCK_TYPE.HOURS) {\n      degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;\n    } else {\n      degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;\n    }\n\n    const style = {\n      '-webkit-transform': 'rotate(' + degrees + 'deg)',\n      '-ms-transform': 'rotate(' + degrees + 'deg)',\n      transform: 'rotate(' + degrees + 'deg)'\n    };\n\n    return style;\n  }\n\n  getTimeValueClass(step: number, index: number) {\n    if (this.currentView === CLOCK_TYPE.HOURS) {\n      this.STEP_DEG = 360 / this.userTime.format;\n    } else {\n      this.STEP_DEG = 360 / 12;\n    }\n    let classes = 'w-clock-step w-clock-deg' + this.STEP_DEG * (index + 1);\n\n    if (this.selectedTimePart === step) {\n      classes += ' mat-primary';\n    }\n\n    return classes;\n  }\n\n  changeTimeValue(step: number) {\n    if (this.currentView === CLOCK_TYPE.HOURS) {\n      this.userTime.hour = step;\n\n      // auto switch to minutes\n      this.viewChange.emit(CLOCK_TYPE.MINUTES);\n    } else {\n      this.userTime.minute = step;\n\n      // auto switch to hours\n      this.viewChange.emit(CLOCK_TYPE.HOURS);\n    }\n    this.userTimeChange.emit(this.userTime);\n  }\n}\n","import { CLOCK_TYPE, ITime } from '../w-clock/w-clock.component';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { MatDialogRef } from '@angular/material';\n\n@Component({\n  styleUrls: ['./w-time-dialog.component.scss'],\n  templateUrl: './w-time-dialog.component.html'\n})\nexport class WTimeDialogComponent {\n  userTime: ITime;\n  color: string;\n\n  private VIEW_HOURS = CLOCK_TYPE.HOURS;\n  private VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n  private currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n  constructor(\n    private dialogRef: MatDialogRef<WTimeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.userTime = this.data.time;\n    this.color = this.data.color;\n  }\n\n  public revert() {\n    this.dialogRef.close(-1);\n  }\n\n  public submit() {\n    this.dialogRef.close(this.userTime);\n  }\n}\n","export class Utils {\n  static formatHour(format, hour): string {\n    if (format === 24) {\n      if (hour === 24) {\n        return '00';\n      } else if (hour < 10) {\n        return '0' + String(hour);\n      }\n    }\n    return String(hour);\n  }\n\n  static formatMinute(minute): string {\n    if (minute === 0) {\n      return '00';\n    } else if (minute < 10) {\n      return '0' + String(minute);\n    } else {\n      return String(minute);\n    }\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n  } from '@angular/core';\nimport { ITime } from '../w-clock/w-clock.component';\nimport { MatDialog } from '@angular/material';\nimport { WTimeDialogComponent } from '../w-time-dialog/w-time-dialog.component';\nimport { Utils } from '../utils';\n\n\n@Component({\n  selector: 'material-timepicker',\n  styleUrls: ['./material-timepicker.component.scss'],\n  templateUrl: './material-timepicker.component.html'\n})\nexport class MaterialTimePickerComponent implements OnInit {\n  @Input() label = 'Hour';\n  @Input() appearance = 'legacy';\n  @Input() userTime: ITime;\n  @Input() color: string;\n  @Input() revertLabel: string;\n  @Input() submitLabel: string;\n\n  @Output() change: EventEmitter<ITime> = new EventEmitter<ITime>();\n\n\n\n  constructor(private dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.userTime) {\n      this.userTime = {\n        hour: 0,\n        minute: 0,\n        meriden: 'PM',\n        format: 24\n      };\n    }\n  }\n\n  time(): string {\n    if (!this.userTime) {\n      return '';\n    }\n\n    let meriden = `${this.userTime.meriden}`;\n    if (this.userTime.format === 24) {\n      meriden = '';\n    }\n\n    let hour = `${this.userTime.hour}`;\n    if (this.userTime.hour === 24) {\n      hour = '00';\n    }\n\n    if (this.userTime.minute === 0) {\n      return `${hour}:00 ${meriden}`;\n    } else if (this.userTime.minute < 10) {\n      const tt = '0' + String(this.userTime.minute);\n      return `${hour}:${tt} ${meriden}`;\n    } else {\n      return `${hour}:${this.userTime.minute} ${meriden}`;\n    }\n  }\n\n  showPicker() {\n    const dialogRef = this.dialog.open(WTimeDialogComponent, {\n      data: {\n        time: {\n          hour: this.userTime.hour,\n          minute: this.userTime.minute,\n          meriden: this.userTime.meriden,\n          format: this.userTime.format\n        },\n        color: this.color,\n        revertLabel: this.revertLabel,\n        submitLabel: this.submitLabel\n      }\n    });\n\n    dialogRef.afterClosed().subscribe((result: ITime | -1) => {\n      // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)\n      if (result === undefined) {\n        return;\n      } else if (result !== -1) {\n        this.userTime = result;\n\n        const hour = result.hour;\n        const minute = result.minute;\n\n        const dataEvent = {\n          hour: Utils.formatHour(result.format, hour),\n          minute: Utils.formatMinute(minute),\n          meriden: this.userTime.meriden,\n          format: this.userTime.format\n        };\n        this.emitChange(dataEvent);\n      }\n    });\n    return false;\n  }\n\n  private emitChange(data) {\n    this.change.emit(data);\n  }\n}\n","import { CLOCK_TYPE, ITime } from '../w-clock/w-clock.component';\nimport { Utils } from '../utils';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output\n  } from '@angular/core';\n\n@Component({\n  selector: 'w-time',\n  templateUrl: './w-time.component.html',\n  styleUrls: ['./w-time.component.scss']\n})\nexport class WTimeComponent implements OnInit {\n  @Input() userTime: ITime;\n  @Output() userTimeChange: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() revertLabel: string;\n  @Input() submitLabel: string;\n\n  @Output() onRevert: EventEmitter<null> = new EventEmitter();\n  @Output() onSubmit: EventEmitter<ITime> = new EventEmitter();\n\n  @Input() color: string;\n\n  public VIEW_HOURS = CLOCK_TYPE.HOURS;\n  public VIEW_MINUTES = CLOCK_TYPE.MINUTES;\n  public currentView: CLOCK_TYPE = this.VIEW_HOURS;\n\n  constructor() {}\n\n  ngOnInit() {\n    if (!this.userTime) {\n      this.userTime = {\n        hour: 6,\n        minute: 0,\n        meriden: 'PM',\n        format: 12\n      };\n    }\n\n    if (!this.revertLabel) {\n      this.revertLabel = 'Cancel';\n    }\n\n    if (!this.submitLabel) {\n      this.submitLabel = 'Okay';\n    }\n  }\n\n  public formatHour(format, hour): string {\n    return Utils.formatHour(format, hour);\n  }\n\n  public formatMinute(minute): string {\n    return Utils.formatMinute(minute);\n  }\n\n  public setCurrentView(type: CLOCK_TYPE) {\n    this.currentView = type;\n  }\n\n  public setMeridien(m: 'PM' | 'AM') {\n    this.userTime.meriden = m;\n  }\n\n  public revert() {\n    this.onRevert.emit();\n  }\n\n  public submit() {\n    this.onSubmit.emit(this.userTime);\n  }\n\n  public emituserTimeChange(event) {\n    this.userTimeChange.emit(this.userTime);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule } from '@angular/forms';\nimport {\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatSelectModule,\n  MatToolbarModule\n  } from '@angular/material';\nimport { MaterialTimePickerComponent } from './material-timepicker/material-timepicker.component';\nimport { NgModule } from '@angular/core';\nimport { WClockComponent } from './w-clock/w-clock.component';\nimport { WTimeComponent } from './w-time/w-time.component';\nimport { WTimeDialogComponent } from './w-time-dialog/w-time-dialog.component';\n\n@NgModule({\n  declarations: [\n    MaterialTimePickerComponent,\n    WTimeDialogComponent,\n    WClockComponent,\n    WTimeComponent,\n  ],\n  imports: [\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatInputModule,\n    MatSelectModule,\n    MatToolbarModule,\n    CommonModule,\n    FormsModule,\n    FlexLayoutModule,\n  ],\n  exports: [\n    MaterialTimePickerComponent,\n    WTimeDialogComponent,\n    WClockComponent,\n    WTimeComponent,\n  ],\n  entryComponents: [\n    MaterialTimePickerComponent,\n    WTimeDialogComponent,\n    WClockComponent,\n    WTimeComponent,\n  ]\n})\nexport class MaterialTimePickerModule { }\n"]}