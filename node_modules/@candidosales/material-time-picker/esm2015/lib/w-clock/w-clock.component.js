/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
/** @enum {number} */
const CLOCK_TYPE = {
    HOURS: 1,
    MINUTES: 2,
};
export { CLOCK_TYPE };
CLOCK_TYPE[CLOCK_TYPE.HOURS] = 'HOURS';
CLOCK_TYPE[CLOCK_TYPE.MINUTES] = 'MINUTES';
/**
 * @record
 */
export function ITime() { }
if (false) {
    /** @type {?} */
    ITime.prototype.hour;
    /** @type {?} */
    ITime.prototype.minute;
    /** @type {?} */
    ITime.prototype.meriden;
    /** @type {?} */
    ITime.prototype.format;
}
export class WClockComponent {
    constructor() {
        this.userTimeChange = new EventEmitter();
        this.viewChange = new EventEmitter();
        this.steps = new Array();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.setupUI();
    }
    /**
     * @return {?}
     */
    setupUI() {
        this.steps = new Array();
        switch (this.currentView) {
            case CLOCK_TYPE.HOURS:
                for (let i = 1; i <= this.userTime.format; i++) {
                    this.steps.push(i);
                    this.selectedTimePart = this.userTime.hour || 0;
                    if (this.selectedTimePart > this.userTime.format) {
                        this.selectedTimePart -= this.userTime.format;
                    }
                }
                break;
            case CLOCK_TYPE.MINUTES:
                for (let i = 5; i <= 55; i += 5) {
                    this.steps.push(i);
                }
                this.steps.push(0);
                this.selectedTimePart = this.userTime.minute || 0;
                break;
        }
    }
    /**
     * @return {?}
     */
    getPointerStyle() {
        /** @type {?} */
        let divider = 1;
        switch (this.currentView) {
            case CLOCK_TYPE.HOURS:
                divider = this.userTime.format;
                break;
            case CLOCK_TYPE.MINUTES:
                divider = 60;
                break;
        }
        /** @type {?} */
        let degrees = 0;
        if (this.currentView === CLOCK_TYPE.HOURS) {
            degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;
        }
        else {
            degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;
        }
        /** @type {?} */
        const style = {
            '-webkit-transform': 'rotate(' + degrees + 'deg)',
            '-ms-transform': 'rotate(' + degrees + 'deg)',
            transform: 'rotate(' + degrees + 'deg)'
        };
        return style;
    }
    /**
     * @param {?} step
     * @param {?} index
     * @return {?}
     */
    getTimeValueClass(step, index) {
        if (this.currentView === CLOCK_TYPE.HOURS) {
            this.STEP_DEG = 360 / this.userTime.format;
        }
        else {
            this.STEP_DEG = 360 / 12;
        }
        /** @type {?} */
        let classes = 'w-clock-step w-clock-deg' + this.STEP_DEG * (index + 1);
        if (this.selectedTimePart === step) {
            classes += ' mat-primary';
        }
        return classes;
    }
    /**
     * @param {?} step
     * @return {?}
     */
    changeTimeValue(step) {
        if (this.currentView === CLOCK_TYPE.HOURS) {
            this.userTime.hour = step;
            // auto switch to minutes
            this.viewChange.emit(CLOCK_TYPE.MINUTES);
        }
        else {
            this.userTime.minute = step;
            // auto switch to hours
            this.viewChange.emit(CLOCK_TYPE.HOURS);
        }
        this.userTimeChange.emit(this.userTime);
    }
}
WClockComponent.decorators = [
    { type: Component, args: [{
                selector: 'w-clock',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"w-clock-wrapper\">\n    <div class=\"w-clock\">\n        <div class=\"w-clock-container\">\n            \n            <!-- Clock center -->\n            <button  mat-mini-fab [color]=\"color\" class=\"w-clock-center\"></button>\n\n            <!-- Clock hand -->\n            <mat-toolbar [ngStyle]=\"getPointerStyle()\" [color]=\"color\" class=\"w-pointer\">\n                <button mat-mini-fab [color]=\"color\" class=\"w-clock-selected\"></button>\n            </mat-toolbar>\n            \n            <!-- Hour / Minute number faces -->\n            <div *ngFor=\"let step of steps; let i = index\" [class]=\"getTimeValueClass(step, i)\" >\n                <button mat-mini-fab\n                    [color]=\"selectedTimePart === step ? color : ''\"\n                    (click)=\"changeTimeValue(step)\">\n                    {{ step }}\n                </button>\n            </div>\n\n        </div>\n    </div>\n</div>",
                styles: [".w-clock-wrapper{height:100%;padding:0 24px}.w-clock-wrapper .w-clock{width:200px;height:200px;border-radius:50%;cursor:pointer;padding:24px;background:#ededed}.w-clock-wrapper .w-clock .w-clock-container{width:100%;height:100%;position:relative;display:block}.w-clock-wrapper .w-clock .w-clock-center{height:6px;width:6px;position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;border-radius:50%}.w-clock-wrapper .w-clock .w-pointer{box-shadow:none;width:1px;height:50%;position:absolute;left:0;right:0;bottom:0;margin:0 auto;padding:0;-webkit-transform-origin:top center;transform-origin:top center;transition:transform .2s;transition:transform .2s,-webkit-transform .2s;z-index:0;pointer-events:none}.w-clock-wrapper .w-clock .w-clock-step{display:block;position:absolute;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}.w-clock-wrapper .w-clock .w-clock-step .mat-mini-fab{box-shadow:none;background-color:transparent}.w-clock-wrapper .w-clock .w-clock-selected{position:absolute;bottom:-19px;left:-19px;min-width:0;min-height:0;pointer-events:none;box-shadow:none;cursor:none}.w-clock-deg0{top:0;left:50%}.w-clock-deg15{top:1.70370869%;left:62.94095226%}.w-clock-deg30{top:6.69872981%;left:75%}.w-clock-deg45{top:14.64466094%;left:85.35533905%}.w-clock-deg60{top:25%;left:93.30127019%}.w-clock-deg75{top:37.05904774%;left:98.29629131%}.w-clock-deg90{top:50%;left:100%}.w-clock-deg105{top:62.94095226%;left:98.29629131%}.w-clock-deg120{top:75%;left:93.30127019%}.w-clock-deg135{top:85.35533906%;left:85.35533906%}.w-clock-deg150{top:93.30127019%;left:75%}.w-clock-deg165{top:98.29629131%;left:62.94095226%}.w-clock-deg180{top:100%;left:50%}.w-clock-deg195{top:98.29629131%;left:37.05904774%}.w-clock-deg210{top:93.30127019%;left:25%}.w-clock-deg225{top:85.35533906%;left:14.64466094%}.w-clock-deg240{top:75%;left:6.69872981%}.w-clock-deg255{top:62.94095226%;left:1.703708686%}.w-clock-deg270{top:50%;left:0}.w-clock-deg285{top:37.05904774%;left:1.703708686%}.w-clock-deg300{top:25%;left:6.69872981%}.w-clock-deg315{top:14.64466094%;left:14.64466094%}.w-clock-deg330{top:6.69872981%;left:25%}.w-clock-deg345{top:1.703708686%;left:37.05904774%}.w-clock-deg360{top:0;left:50%}"]
            }] }
];
WClockComponent.propDecorators = {
    userTime: [{ type: Input }],
    userTimeChange: [{ type: Output }],
    currentView: [{ type: Input }],
    viewChange: [{ type: Output }],
    color: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    WClockComponent.prototype.userTime;
    /** @type {?} */
    WClockComponent.prototype.userTimeChange;
    /** @type {?} */
    WClockComponent.prototype.currentView;
    /** @type {?} */
    WClockComponent.prototype.viewChange;
    /** @type {?} */
    WClockComponent.prototype.color;
    /** @type {?} */
    WClockComponent.prototype.steps;
    /** @type {?} */
    WClockComponent.prototype.selectedTimePart;
    /** @type {?} */
    WClockComponent.prototype.STEP_DEG;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidy1jbG9jay5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FuZGlkb3NhbGVzL21hdGVyaWFsLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3ctY2xvY2svdy1jbG9jay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFDTixZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7OztJQUlyQixRQUFTO0lBQ1QsVUFBVzs7Ozs7Ozs7QUFLYiwyQkFLQzs7O0lBSkMscUJBQVU7O0lBQ1YsdUJBQVk7O0lBQ1osd0JBQXFCOztJQUNyQix1QkFBbUI7O0FBUXJCLE1BQU0sT0FBTyxlQUFlO0lBTDVCO1FBT21CLG1CQUFjLEdBQXdCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHekQsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFJdEQsVUFBSyxHQUFHLElBQUksS0FBSyxFQUFVLENBQUM7SUEwRnJDLENBQUM7Ozs7SUF0RkMsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7O0lBRU8sT0FBTztRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUVqQyxRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDeEIsS0FBSyxVQUFVLENBQUMsS0FBSztnQkFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFFaEQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdB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LFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7OztZQXZHRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBRW5CLDIrQkFBdUM7O2FBQ3hDOzs7dUJBRUUsS0FBSzs2QkFDTCxNQUFNOzBCQUVOLEtBQUs7eUJBQ0wsTUFBTTtvQkFFTixLQUFLOzs7O0lBTk4sbUNBQWdDOztJQUNoQyx5Q0FBMEU7O0lBRTFFLHNDQUF3Qzs7SUFDeEMscUNBQTZEOztJQUU3RCxnQ0FBOEI7O0lBRTlCLGdDQUFtQzs7SUFDbkMsMkNBQWlCOztJQUNqQixtQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25DaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBDdXJyZW50IHR5cGUgdG8gc2hvd1xuZXhwb3J0IGVudW0gQ0xPQ0tfVFlQRSB7XG4gIEhPVVJTID0gMSxcbiAgTUlOVVRFUyA9IDJcbn1cblxuZXhwb3J0IHR5cGUgVGltZUZvcm1hdCA9IDEyIHwgMjQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbWUge1xuICBob3VyOiBhbnk7XG4gIG1pbnV0ZTogYW55O1xuICBtZXJpZGVuOiAnUE0nIHwgJ0FNJztcbiAgZm9ybWF0OiBUaW1lRm9ybWF0O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd3LWNsb2NrJyxcbiAgc3R5bGVVcmxzOiBbJy4vdy1jbG9jay5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZVVybDogJy4vdy1jbG9jay5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgV0Nsb2NrQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcHVibGljIHVzZXJUaW1lOiBJVGltZTtcbiAgQE91dHB1dCgpIHB1YmxpYyB1c2VyVGltZUNoYW5nZTogRXZlbnRFbWl0dGVyPElUaW1lPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKSBwdWJsaWMgY3VycmVudFZpZXc6IENMT0NLX1RZUEU7XG4gIEBPdXRwdXQoKSBwdWJsaWMgdmlld0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q0xPQ0tfVFlQRT4oKTtcblxuICBASW5wdXQoKSBwdWJsaWMgY29sb3I6IHN0cmluZztcblxuICBwdWJsaWMgc3RlcHMgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuICBzZWxlY3RlZFRpbWVQYXJ0O1xuICBwcml2YXRlIFNURVBfREVHOiBudW1iZXI7XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5zZXR1cFVJKCk7XG4gIH1cblxuICBwcml2YXRlIHNldHVwVUkoKSB7XG4gICAgdGhpcy5zdGVwcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cbiAgICBzd2l0Y2ggKHRoaXMuY3VycmVudFZpZXcpIHtcbiAgICAgIGNhc2UgQ0xPQ0tfVFlQRS5IT1VSUzpcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy51c2VyVGltZS5mb3JtYXQ7IGkrKykge1xuICAgICAgICAgIHRoaXMuc3RlcHMucHVzaChpKTtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkVGltZVBhcnQgPSB0aGlzLnVzZXJUaW1lLmhvdXIgfHwgMDtcblxuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGltZVBhcnQgPiB0aGlzLnVzZXJUaW1lLmZvcm1hdCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRpbWVQYXJ0IC09IHRoaXMudXNlclRpbWUuZm9ybWF0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBDTE9DS19UWVBFLk1JTlVURVM6XG4gICAgICAgIGZvciAobGV0IGkgPSA1OyBpIDw9IDU1OyBpICs9IDUpIHtcbiAgICAgICAgICB0aGlzLnN0ZXBzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGVwcy5wdXNoKDApO1xuICAgICAgICB0aGlzLnNlbGVjdGVkVGltZVBhcnQgPSB0aGlzLnVzZXJUaW1lLm1pbnV0ZSB8fCAwO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBnZXRQb2ludGVyU3R5bGUoKSB7XG4gICAgbGV0IGRpdmlkZXIgPSAxO1xuICAgIHN3aXRjaCAodGhpcy5jdXJyZW50Vmlldykge1xuICAgICAgY2FzZSBDTE9DS19UWVBFLkhPVVJTOlxuICAgICAgICBkaXZpZGVyID0gdGhpcy51c2VyVGltZS5mb3JtYXQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIENMT0NLX1RZUEUuTUlOVVRFUzpcbiAgICAgICAgZGl2aWRlciA9IDYwO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsZXQgZGVncmVlcyA9IDA7XG4gICAgaWYgKHRoaXMuY3VycmVudFZpZXcgPT09IENMT0NLX1RZUEUuSE9VUlMpIHtcbiAgICAgIGRlZ3JlZXMgPSBNYXRoLnJvdW5kKHRoaXMudXNlclRpbWUuaG91ciAqICgzNjAgLyBkaXZpZGVyKSkgLSAxODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZ3JlZXMgPSBNYXRoLnJvdW5kKHRoaXMudXNlclRpbWUubWludXRlICogKDM2MCAvIGRpdmlkZXIpKSAtIDE4MDtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdyb3RhdGUoJyArIGRlZ3JlZXMgKyAnZGVnKScsXG4gICAgICAnLW1zLXRyYW5zZm9ybSc6ICdyb3RhdGUoJyArIGRlZ3JlZXMgKyAnZGVnKScsXG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoJyArIGRlZ3JlZXMgKyAnZGVnKSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZ2V0VGltZVZhbHVlQ2xhc3Moc3RlcDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFZpZXcgPT09IENMT0NLX1RZUEUuSE9VUlMpIHtcbiAgICAgIHRoaXMuU1RFUF9ERUcgPSAzNjAgLyB0aGlzLnVzZXJUaW1lLmZvcm1hdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5TVEVQX0RFRyA9IDM2MCAvIDEyO1xuICAgIH1cbiAgICBsZXQgY2xhc3NlcyA9ICd3LWNsb2NrLXN0ZXAgdy1jbG9jay1kZWcnICsgdGhpcy5TVEVQX0RFRyAqIChpbmRleCArIDEpO1xuXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRUaW1lUGFydCA9PT0gc3RlcCkge1xuICAgICAgY2xhc3NlcyArPSAnIG1hdC1wcmltYXJ5JztcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIGNoYW5nZVRpbWVWYWx1ZShzdGVwOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50VmlldyA9PT0gQ0xPQ0tfVFlQRS5IT1VSUykge1xuICAgICAgdGhpcy51c2VyVGltZS5ob3VyID0gc3RlcDtcblxuICAgICAgLy8gYXV0byBzd2l0Y2ggdG8gbWludXRlc1xuICAgICAgdGhpcy52aWV3Q2hhbmdlLmVtaXQoQ0xPQ0tfVFlQRS5NSU5VVEVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51c2VyVGltZS5taW51dGUgPSBzdGVwO1xuXG4gICAgICAvLyBhdXRvIHN3aXRjaCB0byBob3Vyc1xuICAgICAgdGhpcy52aWV3Q2hhbmdlLmVtaXQoQ0xPQ0tfVFlQRS5IT1VSUyk7XG4gICAgfVxuICAgIHRoaXMudXNlclRpbWVDaGFuZ2UuZW1pdCh0aGlzLnVzZXJUaW1lKTtcbiAgfVxufVxuIl19