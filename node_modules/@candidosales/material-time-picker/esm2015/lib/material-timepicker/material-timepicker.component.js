/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { MatDialog } from '@angular/material';
import { WTimeDialogComponent } from '../w-time-dialog/w-time-dialog.component';
import { Utils } from '../utils';
export class MaterialTimePickerComponent {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
        this.label = 'Hour';
        this.appearance = 'legacy';
        this.change = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.userTime) {
            this.userTime = {
                hour: 0,
                minute: 0,
                meriden: 'PM',
                format: 24
            };
        }
    }
    /**
     * @return {?}
     */
    time() {
        if (!this.userTime) {
            return '';
        }
        /** @type {?} */
        let meriden = `${this.userTime.meriden}`;
        if (this.userTime.format === 24) {
            meriden = '';
        }
        /** @type {?} */
        let hour = `${this.userTime.hour}`;
        if (this.userTime.hour === 24) {
            hour = '00';
        }
        if (this.userTime.minute === 0) {
            return `${hour}:00 ${meriden}`;
        }
        else if (this.userTime.minute < 10) {
            /** @type {?} */
            const tt = '0' + String(this.userTime.minute);
            return `${hour}:${tt} ${meriden}`;
        }
        else {
            return `${hour}:${this.userTime.minute} ${meriden}`;
        }
    }
    /**
     * @return {?}
     */
    showPicker() {
        /** @type {?} */
        const dialogRef = this.dialog.open(WTimeDialogComponent, {
            data: {
                time: {
                    hour: this.userTime.hour,
                    minute: this.userTime.minute,
                    meriden: this.userTime.meriden,
                    format: this.userTime.format
                },
                color: this.color,
                revertLabel: this.revertLabel,
                submitLabel: this.submitLabel
            }
        });
        dialogRef.afterClosed().subscribe((result) => {
            // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)
            if (result === undefined) {
                return;
            }
            else if (result !== -1) {
                this.userTime = result;
                /** @type {?} */
                const hour = result.hour;
                /** @type {?} */
                const minute = result.minute;
                /** @type {?} */
                const dataEvent = {
                    hour: Utils.formatHour(result.format, hour),
                    minute: Utils.formatMinute(minute),
                    meriden: this.userTime.meriden,
                    format: this.userTime.format
                };
                this.emitChange(dataEvent);
            }
        });
        return false;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    emitChange(data) {
        this.change.emit(data);
    }
}
MaterialTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'material-timepicker',
                template: "<div fxFlex fxLayout=\"row\" class=\"w-mat-timepicker\">\n  <mat-form-field fxFlex class=\"timeContainer\" appearance=\"{{appearance}}\">\n      <mat-label>{{ label }}</mat-label>\n      <input matInput class=\"timeInput\" placeholder=\"Selec time\" id=\"time_Control\" name=\"time_Control\" [value]=\"time()\">\n      <mat-icon matSuffix (click)=\"showPicker()\">access_time</mat-icon>\n  </mat-form-field>\n</div>\n",
                styles: [".time-picker-button{padding:0;margin:0;min-width:44px}"]
            }] }
];
/** @nocollapse */
MaterialTimePickerComponent.ctorParameters = () => [
    { type: MatDialog }
];
MaterialTimePickerComponent.propDecorators = {
    label: [{ type: Input }],
    appearance: [{ type: Input }],
    userTime: [{ type: Input }],
    color: [{ type: Input }],
    revertLabel: [{ type: Input }],
    submitLabel: [{ type: Input }],
    change: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    MaterialTimePickerComponent.prototype.label;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.appearance;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.userTime;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.color;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.revertLabel;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.submitLabel;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.change;
    /** @type {?} */
    MaterialTimePickerComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0ZXJpYWwtdGltZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2FuZGlkb3NhbGVzL21hdGVyaWFsLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL21hdGVyaWFsLXRpbWVwaWNrZXIvbWF0ZXJpYWwtdGltZXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEVBQ0wsTUFBTSxlQUFlLENBQUM7QUFFekIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFRakMsTUFBTSxPQUFPLDJCQUEyQjs7OztJQVl0QyxZQUFvQixNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBWDVCLFVBQUssR0FBRyxNQUFNLENBQUM7UUFDZixlQUFVLEdBQUcsUUFBUSxDQUFDO1FBTXJCLFdBQU0sR0FBd0IsSUFBSSxZQUFZLEVBQVMsQ0FBQztJQUkxQixDQUFDOzs7O0lBRXpDLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHO2dCQUNkLElBQUksRUFBRSxDQUFDO2dCQUNQLE1BQU0sRUFBRSxDQUFDO2dCQUNULE9BQU8sRUFBRSxJQUFJO2dCQUNiLE1BQU0sRUFBRSxFQUFFO2FBQ1gsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7OztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixPQUFPLEVBQUUsQ0FBQztTQUNYOztZQUVHLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3hDLElBQUksSUFB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Qjs7SUFDL0IsK0NBQXlCOztJQUN6Qiw0Q0FBdUI7O0lBQ3ZCLGtEQUE2Qjs7SUFDN0Isa0RBQTZCOztJQUU3Qiw2Q0FBa0U7O0lBSXRELDZDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPdXRwdXRcbiAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElUaW1lIH0gZnJvbSAnLi4vdy1jbG9jay93LWNsb2NrLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBXVGltZURpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL3ctdGltZS1kaWFsb2cvdy10aW1lLWRpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi91dGlscyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWF0ZXJpYWwtdGltZXBpY2tlcicsXG4gIHN0eWxlVXJsczogWycuL21hdGVyaWFsLXRpbWVwaWNrZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICcuL21hdGVyaWFsLXRpbWVwaWNrZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE1hdGVyaWFsVGltZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGxhYmVsID0gJ0hvdXInO1xuICBASW5wdXQoKSBhcHBlYXJhbmNlID0gJ2xlZ2FjeSc7XG4gIEBJbnB1dCgpIHVzZXJUaW1lOiBJVGltZTtcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgcmV2ZXJ0TGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgc3VibWl0TGFiZWw6IHN0cmluZztcblxuICBAT3V0cHV0KCkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8SVRpbWU+ID0gbmV3IEV2ZW50RW1pdHRlcjxJVGltZT4oKTtcblxuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZykge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMudXNlclRpbWUpIHtcbiAgICAgIHRoaXMudXNlclRpbWUgPSB7XG4gICAgICAgIGhvdXI6IDAsXG4gICAgICAgIG1pbnV0ZTogMCxcbiAgICAgICAgbWVyaWRlbjogJ1BNJyxcbiAgICAgICAgZm9ybWF0OiAyNFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB0aW1lKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLnVzZXJUaW1lKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgbGV0IG1lcmlkZW4gPSBgJHt0aGlzLnVzZXJUaW1lLm1lcmlkZW59YDtcbiAgICBpZiAodGhpcy51c2VyVGltZS5mb3JtYXQgPT09IDI0KSB7XG4gICAgICBtZXJpZGVuID0gJyc7XG4gICAgfVxuXG4gICAgbGV0IGhvdXIgPSBgJHt0aGlzLnVzZXJUaW1lLmhvdXJ9YDtcbiAgICBpZiAodGhpcy51c2VyVGltZS5ob3VyID09PSAyNCkge1xuICAgICAgaG91ciA9ICcwMCc7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXNlclRpbWUubWludXRlID09PSAwKSB7XG4gICAgICByZXR1cm4gYCR7aG91cn06MDAgJHttZXJpZGVufWA7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVzZXJUaW1lLm1pbnV0ZSA8IDEwKSB7XG4gICAgICBjb25zdCB0dCA9ICcwJyArIFN0cmluZyh0aGlzLnVzZXJUaW1lLm1pbnV0ZSk7XG4gICAgICByZXR1cm4gYCR7aG91cn06JHt0dH0gJHttZXJpZGVufWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtob3VyfToke3RoaXMudXNlclRpbWUubWludXRlfSAke21lcmlkZW59YDtcbiAgICB9XG4gIH1cblxuICBzaG93UGlja2VyKCkge1xuICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW4oV1RpbWVEaWFsb2dDb21wb25lbnQsIHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdGltZToge1xuICAgICAgICAgIGhvdXI6IHRoaXMudXNlclRpbWUuaG91cixcbiAgICAgICAgICBtaW51dGU6IHRoaXMudXNlclRpbWUubWludXRlLFxuICAgICAgICAgIG1lcmlkZW46IHRoaXMudXNlclRpbWUubWVyaWRlbixcbiAgICAgICAgICBmb3JtYXQ6IHRoaXMudXNlclRpbWUuZm9ybWF0XG4gICAgICAgIH0sXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICByZXZlcnRMYWJlbDogdGhpcy5yZXZlcnRMYWJlbCxcbiAgICAgICAgc3VibWl0TGFiZWw6IHRoaXMuc3VibWl0TGFiZWxcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgocmVzdWx0OiBJVGltZSB8IC0xKSA9PiB7XG4gICAgICAvLyByZXN1bHQgd2lsbCBiZSB1cGRhdGUgdXNlclRpbWUgb2JqZWN0IG9yIC0xIG9yIHVuZGVmaW5lZCAoY2xvc2VkIGRpYWxvZyB3L28gY2xpY2tpbmcgY2FuY2VsKVxuICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSAtMSkge1xuICAgICAgICB0aGlzLnVzZXJUaW1lID0gcmVzdWx0O1xuXG4gICAgICAgIGNvbnN0IGhvdXIgPSByZXN1bHQuaG91cjtcbiAgICAgICAgY29uc3QgbWludXRlID0gcmVzdWx0Lm1pbnV0ZTtcblxuICAgICAgICBjb25zdCBkYXRhRXZlbnQgPSB7XG4gICAgICAgICAgaG91cjogVXRpbHMuZm9ybWF0SG91cihyZXN1bHQuZm9ybWF0LCBob3VyKSxcbiAgICAgICAgICBtaW51dGU6IFV0aWxzLmZvcm1hdE1pbnV0ZShtaW51dGUpLFxuICAgICAgICAgIG1lcmlkZW46IHRoaXMudXNlclRpbWUubWVyaWRlbixcbiAgICAgICAgICBmb3JtYXQ6IHRoaXMudXNlclRpbWUuZm9ybWF0XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW1pdENoYW5nZShkYXRhRXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdENoYW5nZShkYXRhKSB7XG4gICAgdGhpcy5jaGFuZ2UuZW1pdChkYXRhKTtcbiAgfVxufVxuIl19