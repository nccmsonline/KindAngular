(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('escape-string-regexp'), require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators'), require('lodash'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-select-ex', ['exports', 'escape-string-regexp', '@angular/core', '@angular/forms', '@angular/platform-browser', 'rxjs', 'rxjs/operators', 'lodash', '@angular/common'], factory) :
    (factory((global['ngx-select-ex'] = {}),global.escapeString,global.ng.core,global.ng.forms,global.ng.platformBrowser,global.rxjs,global.rxjs.operators,global._,global.ng.common));
}(this, (function (exports,escapeStringNs,core,forms,platformBrowser,rxjs,operators,lodashNs,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var escapeString = escapeStringNs;
    var NgxSelectOption = /** @class */ (function () {
        function NgxSelectOption(value, text, disabled, data, _parent) {
            if (_parent === void 0) {
                _parent = null;
            }
            this.value = value;
            this.text = text;
            this.disabled = disabled;
            this.data = data;
            this._parent = _parent;
            this.type = 'option';
            this.cacheRenderedText = null;
        }
        Object.defineProperty(NgxSelectOption.prototype, "parent", {
            get: /**
             * @return {?}
             */ function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} sanitizer
         * @param {?} highlightText
         * @return {?}
         */
        NgxSelectOption.prototype.renderText = /**
         * @param {?} sanitizer
         * @param {?} highlightText
         * @return {?}
         */
            function (sanitizer, highlightText) {
                if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {
                    this.cacheHighlightText = highlightText;
                    if (this.cacheHighlightText) {
                        this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));
                    }
                    else {
                        this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);
                    }
                }
                return this.cacheRenderedText;
            };
        return NgxSelectOption;
    }());
    var NgxSelectOptGroup = /** @class */ (function () {
        function NgxSelectOptGroup(label, options) {
            if (options === void 0) {
                options = [];
            }
            this.label = label;
            this.options = options;
            this.type = 'optgroup';
            this.filter(function () { return true; });
        }
        /**
         * @param {?} callbackFn
         * @return {?}
         */
        NgxSelectOptGroup.prototype.filter = /**
         * @param {?} callbackFn
         * @return {?}
         */
            function (callbackFn) {
                this.optionsFiltered = this.options.filter(function (option) { return callbackFn(option); });
            };
        return NgxSelectOptGroup;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxSelectOptionDirective = /** @class */ (function () {
        function NgxSelectOptionDirective(template) {
            this.template = template;
        }
        NgxSelectOptionDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngx-select-option]' },] }
        ];
        /** @nocollapse */
        NgxSelectOptionDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return NgxSelectOptionDirective;
    }());
    var NgxSelectOptionSelectedDirective = /** @class */ (function () {
        function NgxSelectOptionSelectedDirective(template) {
            this.template = template;
        }
        NgxSelectOptionSelectedDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngx-select-option-selected]' },] }
        ];
        /** @nocollapse */
        NgxSelectOptionSelectedDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return NgxSelectOptionSelectedDirective;
    }());
    var NgxSelectOptionNotFoundDirective = /** @class */ (function () {
        function NgxSelectOptionNotFoundDirective(template) {
            this.template = template;
        }
        NgxSelectOptionNotFoundDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngx-select-option-not-found]' },] }
        ];
        /** @nocollapse */
        NgxSelectOptionNotFoundDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef }
            ];
        };
        return NgxSelectOptionNotFoundDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var _ = lodashNs;
    /** @type {?} */
    var escapeString$1 = escapeStringNs;
    /** @type {?} */
    var NGX_SELECT_OPTIONS = new core.InjectionToken('NGX_SELECT_OPTIONS');
    /** @enum {number} */
    var ENavigation = {
        first: 0, previous: 1, next: 2, last: 3,
        firstSelected: 4, firstIfOptionActiveInvisible: 5,
    };
    ENavigation[ENavigation.first] = 'first';
    ENavigation[ENavigation.previous] = 'previous';
    ENavigation[ENavigation.next] = 'next';
    ENavigation[ENavigation.last] = 'last';
    ENavigation[ENavigation.firstSelected] = 'firstSelected';
    ENavigation[ENavigation.firstIfOptionActiveInvisible] = 'firstIfOptionActiveInvisible';
    /**
     * @param {?} obj
     * @param {?} propertyName
     * @return {?}
     */
    function propertyExists(obj, propertyName) {
        return propertyName in obj;
    }
    var NgxSelectComponent = /** @class */ (function () {
        function NgxSelectComponent(iterableDiffers, sanitizer, cd, defaultOptions) {
            var _this = this;
            this.sanitizer = sanitizer;
            this.cd = cd;
            this.optionValueField = 'id';
            this.optionTextField = 'text';
            this.optGroupLabelField = 'label';
            this.optGroupOptionsField = 'options';
            this.multiple = false;
            this.allowClear = false;
            this.placeholder = '';
            this.noAutoComplete = false;
            this.disabled = false;
            this.defaultValue = [];
            this.autoSelectSingleOption = false;
            this.autoClearSearch = false;
            this.noResultsFound = 'No results found';
            this.size = 'default';
            this.autoActiveOnMouseEnter = true;
            this.keyCodeToRemoveSelected = 'Delete';
            this.keyCodeToOptionsOpen = ['Enter', 'NumpadEnter'];
            this.keyCodeToOptionsClose = 'Escape';
            this.keyCodeToOptionsSelect = ['Enter', 'NumpadEnter'];
            this.keyCodeToNavigateFirst = 'ArrowLeft';
            this.keyCodeToNavigatePrevious = 'ArrowUp';
            this.keyCodeToNavigateNext = 'ArrowDown';
            this.keyCodeToNavigateLast = 'ArrowRight';
            this.typed = new core.EventEmitter();
            this.focus = new core.EventEmitter();
            this.blur = new core.EventEmitter();
            this.open = new core.EventEmitter();
            this.close = new core.EventEmitter();
            this.select = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.navigated = new core.EventEmitter();
            this.selectionChanges = new core.EventEmitter();
            this.optionsOpened = false;
            this.actualValue = [];
            this.subjOptions = new rxjs.BehaviorSubject([]);
            this.subjSearchText = new rxjs.BehaviorSubject('');
            this.subjOptionsSelected = new rxjs.BehaviorSubject([]);
            this.subjExternalValue = new rxjs.BehaviorSubject([]);
            this.subjDefaultValue = new rxjs.BehaviorSubject([]);
            this.subjRegisterOnChange = new rxjs.Subject();
            this._focusToInput = false;
            this.isFocused = false;
            this.onChange = function (v) { return v; };
            this.onTouched = function () { return null; };
            Object.assign(this, defaultOptions);
            // DIFFERS
            this.itemsDiffer = iterableDiffers.find([]).create(null);
            this.defaultValueDiffer = iterableDiffers.find([]).create(null);
            // OBSERVERS
            this.typed.subscribe(function (text) { return _this.subjSearchText.next(text); });
            this.subjOptionsSelected.subscribe(function (options) { return _this.selectionChanges.emit(options); });
            /** @type {?} */
            var cacheExternalValue;
            /** @type {?} */
            var subjActualValue = rxjs.combineLatest(rxjs.merge(this.subjExternalValue.pipe(operators.map(function (v) { return cacheExternalValue = v === null ? [] : [].concat(v); })), this.subjOptionsSelected.pipe(operators.map(function (options) { return options.map(function (o) { return o.value; }); }))), this.subjDefaultValue).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), eVal = _b[0], dVal = _b[1];
                /** @type {?} */
                var newVal = _.isEqual(eVal, dVal) ? [] : eVal;
                return newVal.length ? newVal : dVal;
            }), operators.distinctUntilChanged(function (x, y) { return _.isEqual(x, y); }), operators.share());
            // Export actual value
            rxjs.combineLatest(subjActualValue, this.subjRegisterOnChange)
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 1), actualValue = _b[0];
                return actualValue;
            }))
                .subscribe(function (actualValue) {
                _this.actualValue = actualValue;
                if (!_.isEqual(actualValue, cacheExternalValue)) {
                    cacheExternalValue = actualValue;
                    if (_this.multiple) {
                        _this.onChange(actualValue);
                    }
                    else {
                        _this.onChange(actualValue.length ? actualValue[0] : null);
                    }
                }
            });
            // Correct selected options when the options changed
            rxjs.combineLatest(this.subjOptions.pipe(operators.flatMap(function (options) {
                return rxjs.from(options).pipe(operators.flatMap(function (option) {
                    return option instanceof NgxSelectOption
                        ? rxjs.of(option)
                        : (option instanceof NgxSelectOptGroup ? rxjs.from(option.options) : rxjs.EMPTY);
                }), operators.toArray());
            })), subjActualValue).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), optionsFlat = _b[0], actualValue = _b[1];
                /** @type {?} */
                var optionsSelected = [];
                actualValue.forEach(function (value) {
                    /** @type {?} */
                    var selectedOption = optionsFlat.find(function (option) { return option.value === value; });
                    if (selectedOption) {
                        optionsSelected.push(selectedOption);
                    }
                });
                if (_this.keepSelectedItems) {
                    /** @type {?} */
                    var optionValues_1 = optionsSelected.map(function (option) { return option.value; });
                    /** @type {?} */
                    var keptSelectedOptions = _this.subjOptionsSelected.value
                        .filter(function (selOption) { return optionValues_1.indexOf(selOption.value) === -1; });
                    optionsSelected.push.apply(optionsSelected, __spread(keptSelectedOptions));
                }
                if (!_.isEqual(optionsSelected, _this.subjOptionsSelected.value)) {
                    _this.subjOptionsSelected.next(optionsSelected);
                    _this.cd.markForCheck();
                }
            })).subscribe();
            // Ensure working filter by a search text
            rxjs.combineLatest(this.subjOptions, this.subjOptionsSelected, this.subjSearchText).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), options = _b[0], selectedOptions = _b[1], search = _b[2];
                _this.optionsFiltered = _this.filterOptions(search, options, selectedOptions).map(function (option) {
                    if (option instanceof NgxSelectOption) {
                        option.highlightedText = _this.highlightOption(option);
                    }
                    else if (option instanceof NgxSelectOptGroup) {
                        option.options.map(function (subOption) {
                            subOption.highlightedText = _this.highlightOption(subOption);
                            return subOption;
                        });
                    }
                    return option;
                });
                _this.cacheOptionsFilteredFlat = null;
                _this.navigateOption(ENavigation.firstIfOptionActiveInvisible);
                _this.cd.markForCheck();
                return selectedOptions;
            }), operators.flatMap(function (selectedOptions) { return _this.optionsFilteredFlat().pipe(operators.filter(function (flatOptions) { return _this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length; })); })).subscribe(function (flatOptions) {
                _this.subjOptionsSelected.next(flatOptions);
                _this.cd.markForCheck();
            });
        }
        Object.defineProperty(NgxSelectComponent.prototype, "inputText", {
            get: /**
             * \@internal
             * @return {?}
             */ function () {
                if (this.inputElRef && this.inputElRef.nativeElement) {
                    return this.inputElRef.nativeElement.value;
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} otherClassNames
         * @param {?=} useFormControl
         * @return {?}
         */
        NgxSelectComponent.prototype.setFormControlSize = /**
         * @param {?=} otherClassNames
         * @param {?=} useFormControl
         * @return {?}
         */
            function (otherClassNames, useFormControl) {
                if (otherClassNames === void 0) {
                    otherClassNames = {};
                }
                if (useFormControl === void 0) {
                    useFormControl = true;
                }
                /** @type {?} */
                var formControlExtraClasses = useFormControl ? {
                    'form-control-sm input-sm': this.size === 'small',
                    'form-control-lg input-lg': this.size === 'large'
                } : {};
                return Object.assign(formControlExtraClasses, otherClassNames);
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.setBtnSize = /**
         * @return {?}
         */
            function () {
                return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' };
            };
        Object.defineProperty(NgxSelectComponent.prototype, "optionsSelected", {
            get: /**
             * @return {?}
             */ function () {
                return this.subjOptionsSelected.value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        NgxSelectComponent.prototype.mainClicked = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.clickedSelectComponent = this;
                if (!this.isFocused) {
                    this.isFocused = true;
                    this.focus.emit();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxSelectComponent.prototype.documentClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.clickedSelectComponent !== this) {
                    if (this.optionsOpened) {
                        this.optionsClose();
                        this.cd.detectChanges(); // fix error because of delay between different events
                    }
                    if (this.isFocused) {
                        this.isFocused = false;
                        this.blur.emit();
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.optionsFilteredFlat = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.cacheOptionsFilteredFlat) {
                    return rxjs.of(this.cacheOptionsFilteredFlat);
                }
                return rxjs.from(this.optionsFiltered).pipe(operators.flatMap(function (option) {
                    return option instanceof NgxSelectOption ? rxjs.of(option) :
                        (option instanceof NgxSelectOptGroup ? rxjs.from(option.optionsFiltered) : rxjs.EMPTY);
                }), operators.filter(function (optionsFilteredFlat) { return !optionsFilteredFlat.disabled; }), operators.toArray(), operators.tap(function (optionsFilteredFlat) { return _this.cacheOptionsFilteredFlat = optionsFilteredFlat; }));
            };
        /**
         * @param {?} navigation
         * @return {?}
         */
        NgxSelectComponent.prototype.navigateOption = /**
         * @param {?} navigation
         * @return {?}
         */
            function (navigation) {
                var _this = this;
                this.optionsFilteredFlat().pipe(operators.map(function (options) {
                    /** @type {?} */
                    var navigated = { index: -1, activeOption: null, filteredOptionList: options };
                    /** @type {?} */
                    var newActiveIdx;
                    switch (navigation) {
                        case ENavigation.first:
                            navigated.index = 0;
                            break;
                        case ENavigation.previous:
                            newActiveIdx = options.indexOf(_this.optionActive) - 1;
                            navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;
                            break;
                        case ENavigation.next:
                            newActiveIdx = options.indexOf(_this.optionActive) + 1;
                            navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;
                            break;
                        case ENavigation.last:
                            navigated.index = options.length - 1;
                            break;
                        case ENavigation.firstSelected:
                            if (_this.subjOptionsSelected.value.length) {
                                navigated.index = options.indexOf(_this.subjOptionsSelected.value[0]);
                            }
                            break;
                        case ENavigation.firstIfOptionActiveInvisible:
                            /** @type {?} */
                            var idxOfOptionActive = options.indexOf(_this.optionActive);
                            navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;
                            break;
                    }
                    navigated.activeOption = options[navigated.index];
                    return navigated;
                })).subscribe(function (newNavigated) { return _this.optionActivate(newNavigated); });
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                if (this.itemsDiffer.diff(this.items)) {
                    this.subjOptions.next(this.buildOptions(this.items));
                }
                /** @type {?} */
                var defVal = this.defaultValue ? [].concat(this.defaultValue) : [];
                if (this.defaultValueDiffer.diff(defVal)) {
                    this.subjDefaultValue.next(defVal);
                }
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&
                    this.inputElRef.nativeElement !== document.activeElement) {
                    this._focusToInput = false;
                    this.inputElRef.nativeElement.focus();
                }
                if (this.choiceMenuElRef) {
                    /** @type {?} */
                    var ulElement = /** @type {?} */ (this.choiceMenuElRef.nativeElement);
                    /** @type {?} */
                    var element = /** @type {?} */ (ulElement.querySelector('a.ngx-select__item_active.active'));
                    if (element && element.offsetHeight > 0) {
                        this.ensureVisibleElement(element);
                    }
                }
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.canClearNotMultiple = /**
         * @return {?}
         */
            function () {
                return this.allowClear && !!this.subjOptionsSelected.value.length &&
                    (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.focusToInput = /**
         * @return {?}
         */
            function () {
                this._focusToInput = true;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxSelectComponent.prototype.inputKeyDown = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var keysForOpenedState = [].concat(this.keyCodeToOptionsSelect, this.keyCodeToNavigateFirst, this.keyCodeToNavigatePrevious, this.keyCodeToNavigateNext, this.keyCodeToNavigateLast);
                /** @type {?} */
                var keysForClosedState = [].concat(this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected);
                if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {
                    event.preventDefault();
                    event.stopPropagation();
                    switch (event.code) {
                        case ([].concat(this.keyCodeToOptionsSelect).indexOf(event.code) + 1) && event.code:
                            this.optionSelect(this.optionActive);
                            this.navigateOption(ENavigation.next);
                            break;
                        case this.keyCodeToNavigateFirst:
                            this.navigateOption(ENavigation.first);
                            break;
                        case this.keyCodeToNavigatePrevious:
                            this.navigateOption(ENavigation.previous);
                            break;
                        case this.keyCodeToNavigateLast:
                            this.navigateOption(ENavigation.last);
                            break;
                        case this.keyCodeToNavigateNext:
                            this.navigateOption(ENavigation.next);
                            break;
                    }
                }
                else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {
                    event.preventDefault();
                    event.stopPropagation();
                    switch (event.code) {
                        case ([].concat(this.keyCodeToOptionsOpen).indexOf(event.code) + 1) && event.code:
                            this.optionsOpen();
                            break;
                        case this.keyCodeToRemoveSelected:
                            this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);
                            break;
                    }
                }
            };
        /**
         * @param {?} index
         * @param {?} option
         * @return {?}
         */
        NgxSelectComponent.prototype.trackByOption = /**
         * @param {?} index
         * @param {?} option
         * @return {?}
         */
            function (index, option) {
                return option instanceof NgxSelectOption ? option.value :
                    (option instanceof NgxSelectOptGroup ? option.label : option);
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.checkInputVisibility = /**
         * @return {?}
         */
            function () {
                return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);
            };
        /**
         * \@internal
         * @param {?=} value
         * @param {?=} event
         * @return {?}
         */
        NgxSelectComponent.prototype.inputKeyUp = /**
         * \@internal
         * @param {?=} value
         * @param {?=} event
         * @return {?}
         */
            function (value, event) {
                if (value === void 0) {
                    value = '';
                }
                if (event.code === this.keyCodeToOptionsClose) {
                    this.optionsClose();
                }
                else if (this.optionsOpened) {
                    this.typed.emit(value);
                }
                else if (!this.optionsOpened && value) {
                    this.optionsOpen(value);
                }
            };
        /**
         * \@internal
         * @param {?=} value
         * @return {?}
         */
        NgxSelectComponent.prototype.inputClick = /**
         * \@internal
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (value === void 0) {
                    value = '';
                }
                if (!this.optionsOpened) {
                    this.optionsOpen(value);
                }
            };
        /**
         * \@internal
         * @param {?} html
         * @return {?}
         */
        NgxSelectComponent.prototype.sanitize = /**
         * \@internal
         * @param {?} html
         * @return {?}
         */
            function (html) {
                return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;
            };
        /**
         * \@internal
         * @param {?} option
         * @return {?}
         */
        NgxSelectComponent.prototype.highlightOption = /**
         * \@internal
         * @param {?} option
         * @return {?}
         */
            function (option) {
                if (this.inputElRef) {
                    return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);
                }
                return option.renderText(this.sanitizer, '');
            };
        /**
         * \@internal
         * @param {?} option
         * @param {?=} event
         * @return {?}
         */
        NgxSelectComponent.prototype.optionSelect = /**
         * \@internal
         * @param {?} option
         * @param {?=} event
         * @return {?}
         */
            function (option, event) {
                if (event === void 0) {
                    event = null;
                }
                if (event) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                if (option && !option.disabled) {
                    this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));
                    this.select.emit(option.value);
                    this.optionsClose();
                    this.onTouched();
                }
            };
        /**
         * \@internal
         * @param {?} option
         * @param {?} event
         * @return {?}
         */
        NgxSelectComponent.prototype.optionRemove = /**
         * \@internal
         * @param {?} option
         * @param {?} event
         * @return {?}
         */
            function (option, event) {
                if (!this.disabled && option) {
                    event.stopPropagation();
                    this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(function (o) { return o !== option; }));
                    this.remove.emit(option.value);
                }
            };
        /**
         * \@internal
         * @param {?} navigated
         * @return {?}
         */
        NgxSelectComponent.prototype.optionActivate = /**
         * \@internal
         * @param {?} navigated
         * @return {?}
         */
            function (navigated) {
                if ((this.optionActive !== navigated.activeOption) &&
                    (!navigated.activeOption || !navigated.activeOption.disabled)) {
                    if (this.optionActive) {
                        this.optionActive.active = false;
                    }
                    this.optionActive = navigated.activeOption;
                    if (this.optionActive) {
                        this.optionActive.active = true;
                    }
                    this.navigated.emit(navigated);
                    this.cd.detectChanges();
                }
            };
        /**
         * \@internal
         * @param {?} navigated
         * @return {?}
         */
        NgxSelectComponent.prototype.onMouseEnter = /**
         * \@internal
         * @param {?} navigated
         * @return {?}
         */
            function (navigated) {
                if (this.autoActiveOnMouseEnter) {
                    this.optionActivate(navigated);
                }
            };
        /**
         * @param {?} search
         * @param {?} options
         * @param {?} selectedOptions
         * @return {?}
         */
        NgxSelectComponent.prototype.filterOptions = /**
         * @param {?} search
         * @param {?} options
         * @param {?} selectedOptions
         * @return {?}
         */
            function (search, options, selectedOptions) {
                var _this = this;
                /** @type {?} */
                var regExp = new RegExp(escapeString$1(search), 'i');
                /** @type {?} */
                var filterOption = function (option) {
                    if (_this.searchCallback) {
                        return _this.searchCallback(search, option);
                    }
                    return (!search || regExp.test(option.text)) && (!_this.multiple || selectedOptions.indexOf(option) === -1);
                };
                return options.filter(function (option) {
                    if (option instanceof NgxSelectOption) {
                        return filterOption(/** @type {?} */ (option));
                    }
                    else if (option instanceof NgxSelectOptGroup) {
                        /** @type {?} */
                        var subOp = /** @type {?} */ (option);
                        subOp.filter(function (subOption) { return filterOption(subOption); });
                        return subOp.optionsFiltered.length;
                    }
                });
            };
        /**
         * @param {?} element
         * @return {?}
         */
        NgxSelectComponent.prototype.ensureVisibleElement = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {
                    this.cacheElementOffsetTop = element.offsetTop;
                    /** @type {?} */
                    var container = this.choiceMenuElRef.nativeElement;
                    if (this.cacheElementOffsetTop < container.scrollTop) {
                        container.scrollTop = this.cacheElementOffsetTop;
                    }
                    else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {
                        container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;
                    }
                }
            };
        /**
         * @param {?=} search
         * @return {?}
         */
        NgxSelectComponent.prototype.optionsOpen = /**
         * @param {?=} search
         * @return {?}
         */
            function (search) {
                if (search === void 0) {
                    search = '';
                }
                if (!this.disabled) {
                    this.optionsOpened = true;
                    this.subjSearchText.next(search);
                    if (!this.multiple && this.subjOptionsSelected.value.length) {
                        this.navigateOption(ENavigation.firstSelected);
                    }
                    else {
                        this.navigateOption(ENavigation.first);
                    }
                    this.focusToInput();
                    this.open.emit();
                    this.cd.markForCheck();
                }
            };
        /**
         * @return {?}
         */
        NgxSelectComponent.prototype.optionsClose = /**
         * @return {?}
         */
            function () {
                this.optionsOpened = false;
                // if (focusToHost) {
                //     const x = window.scrollX, y = window.scrollY;
                //     this.mainElRef.nativeElement.focus();
                //     window.scrollTo(x, y);
                // }
                this.close.emit();
                if (this.autoClearSearch && this.multiple && this.inputElRef) {
                    this.inputElRef.nativeElement.value = null;
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        NgxSelectComponent.prototype.buildOptions = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                var _this = this;
                /** @type {?} */
                var result = [];
                if (Array.isArray(data)) {
                    /** @type {?} */
                    var option_1 = void 0;
                    data.forEach(function (item) {
                        /** @type {?} */
                        var isOptGroup = typeof item === 'object' && item !== null &&
                            propertyExists(item, _this.optGroupLabelField) && propertyExists(item, _this.optGroupOptionsField) &&
                            Array.isArray(item[_this.optGroupOptionsField]);
                        if (isOptGroup) {
                            /** @type {?} */
                            var optGroup_1 = new NgxSelectOptGroup(item[_this.optGroupLabelField]);
                            item[_this.optGroupOptionsField].forEach(function (subOption) {
                                if (option_1 = _this.buildOption(subOption, optGroup_1)) {
                                    optGroup_1.options.push(option_1);
                                }
                            });
                            result.push(optGroup_1);
                        }
                        else if (option_1 = _this.buildOption(item, null)) {
                            result.push(option_1);
                        }
                    });
                }
                return result;
            };
        /**
         * @param {?} data
         * @param {?} parent
         * @return {?}
         */
        NgxSelectComponent.prototype.buildOption = /**
         * @param {?} data
         * @param {?} parent
         * @return {?}
         */
            function (data, parent) {
                /** @type {?} */
                var value;
                /** @type {?} */
                var text;
                /** @type {?} */
                var disabled;
                if (typeof data === 'string' || typeof data === 'number') {
                    value = text = data;
                    disabled = false;
                }
                else if (typeof data === 'object' && data !== null &&
                    (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {
                    value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];
                    text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];
                    disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;
                }
                else {
                    return null;
                }
                return new NgxSelectOption(value, text, disabled, data, parent);
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        NgxSelectComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                this.subjExternalValue.next(obj);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxSelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
                this.subjRegisterOnChange.next();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxSelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NgxSelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
                this.cd.markForCheck();
            };
        NgxSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-select',
                        template: "<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n     [ngClass]=\"setFormControlSize({\n        'ngx-select_multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }, multiple === true)\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                <span [innerHtml]=\"placeholder\"></span>\n            </span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <span class=\"ngx-select__toggle-buttons\">\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                   [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n                <i class=\"dropdown-toggle\"></i>\n                <i class=\"ngx-select__toggle-caret caret\"></i>\n            </span>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\">\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keyup)=\"inputKeyUp(input.value, $event)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           autocomplete=\"off\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n        [class.show]=\"optionsOpened\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': option.active,\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"onMouseEnter({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: idxOption\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: option.highlightedText,\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"\n                          [ngTemplateOutletContext]=\"{$implicit: inputText}\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        {{noResultsFound}}\n    </ng-template>\n\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(function () { return NgxSelectComponent; }),
                                multi: true
                            }
                        ],
                        styles: [".ngx-select_multiple{height:auto;padding:3px 3px 0}.ngx-select_multiple .ngx-select__search{background-color:transparent!important;border:none;outline:0;box-shadow:none;height:1.6666em;padding:0;margin-bottom:3px}.ngx-select__disabled{background-color:#eceeef;border-radius:4px;position:absolute;width:100%;height:100%;z-index:5;opacity:.6;top:0;left:0;cursor:not-allowed}.ngx-select__toggle{outline:0;position:relative;text-align:left!important;color:#333;background-color:#fff;border-color:#ccc;display:inline-flex;align-items:stretch;justify-content:space-between}.ngx-select__toggle:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.ngx-select__toggle-buttons{flex-shrink:0;display:flex;align-items:center}.ngx-select__toggle-caret{position:absolute;height:10px;top:50%;right:10px;margin-top:-2px}.ngx-select__placeholder{float:left;max-width:100%;text-overflow:ellipsis;overflow:hidden}.ngx-select__clear{margin-right:10px;padding:0;border:none}.ngx-select_multiple .ngx-select__clear{line-height:initial;margin-left:5px;margin-right:0;color:#000;opacity:.5}.ngx-select__clear-icon{display:inline-block;font-size:inherit;cursor:pointer;position:relative;width:1em;height:.75em;padding:0}.ngx-select__clear-icon:after,.ngx-select__clear-icon:before{content:'';position:absolute;border-top:3px solid;width:100%;top:50%;left:0;margin-top:-1px}.ngx-select__clear-icon:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ngx-select__clear-icon:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.ngx-select__choices{width:100%;height:auto;max-height:200px;overflow-x:hidden;margin-top:0;position:absolute}.ngx-select_multiple .ngx-select__choices{margin-top:1px}.ngx-select__item{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;white-space:nowrap;cursor:pointer;text-decoration:none}.ngx-select__item_disabled,.ngx-select__item_no-found{cursor:default}.ngx-select__item_active{color:#fff;outline:0;background-color:#428bca}.ngx-select__selected-plural,.ngx-select__selected-single{display:inline-flex;align-items:center;overflow:hidden}.ngx-select__selected-plural span,.ngx-select__selected-single span{overflow:hidden;text-overflow:ellipsis}.ngx-select__selected-plural{outline:0;margin:0 3px 3px 0}.input-group>.dropdown{position:static}"]
                    }] }
        ];
        /** @nocollapse */
        NgxSelectComponent.ctorParameters = function () {
            return [
                { type: core.IterableDiffers },
                { type: platformBrowser.DomSanitizer },
                { type: core.ChangeDetectorRef },
                { type: undefined, decorators: [{ type: core.Inject, args: [NGX_SELECT_OPTIONS,] }, { type: core.Optional }] }
            ];
        };
        NgxSelectComponent.propDecorators = {
            items: [{ type: core.Input }],
            optionValueField: [{ type: core.Input }],
            optionTextField: [{ type: core.Input }],
            optGroupLabelField: [{ type: core.Input }],
            optGroupOptionsField: [{ type: core.Input }],
            multiple: [{ type: core.Input }],
            allowClear: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            noAutoComplete: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            defaultValue: [{ type: core.Input }],
            autoSelectSingleOption: [{ type: core.Input }],
            autoClearSearch: [{ type: core.Input }],
            noResultsFound: [{ type: core.Input }],
            keepSelectedItems: [{ type: core.Input }],
            size: [{ type: core.Input }],
            searchCallback: [{ type: core.Input }],
            autoActiveOnMouseEnter: [{ type: core.Input }],
            typed: [{ type: core.Output }],
            focus: [{ type: core.Output }],
            blur: [{ type: core.Output }],
            open: [{ type: core.Output }],
            close: [{ type: core.Output }],
            select: [{ type: core.Output }],
            remove: [{ type: core.Output }],
            navigated: [{ type: core.Output }],
            selectionChanges: [{ type: core.Output }],
            mainElRef: [{ type: core.ViewChild, args: ['main',] }],
            inputElRef: [{ type: core.ViewChild, args: ['input',] }],
            choiceMenuElRef: [{ type: core.ViewChild, args: ['choiceMenu',] }],
            templateOption: [{ type: core.ContentChild, args: [NgxSelectOptionDirective, { read: core.TemplateRef },] }],
            templateSelectedOption: [{ type: core.ContentChild, args: [NgxSelectOptionSelectedDirective, { read: core.TemplateRef },] }],
            templateOptionNotFound: [{ type: core.ContentChild, args: [NgxSelectOptionNotFoundDirective, { read: core.TemplateRef },] }],
            documentClick: [{ type: core.HostListener, args: ['document:focusin', ['$event'],] }, { type: core.HostListener, args: ['document:click', ['$event'],] }]
        };
        return NgxSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxSelectModule = /** @class */ (function () {
        function NgxSelectModule() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        NgxSelectModule.forRoot = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: NgxSelectModule,
                    providers: [{ provide: NGX_SELECT_OPTIONS, useValue: options }]
                };
            };
        NgxSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [NgxSelectComponent,
                            NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective
                        ],
                        exports: [NgxSelectComponent,
                            NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective
                        ]
                    },] }
        ];
        return NgxSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxSelectModule = NgxSelectModule;
    exports.NGX_SELECT_OPTIONS = NGX_SELECT_OPTIONS;
    exports.NgxSelectComponent = NgxSelectComponent;
    exports.NgxSelectOption = NgxSelectOption;
    exports.NgxSelectOptGroup = NgxSelectOptGroup;
    exports.NgxSelectOptionDirective = NgxSelectOptionDirective;
    exports.NgxSelectOptionSelectedDirective = NgxSelectOptionSelectedDirective;
    exports.NgxSelectOptionNotFoundDirective = NgxSelectOptionNotFoundDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,